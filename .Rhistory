library(data.table);
library(bio3d);
library(fields);
library(plyr);
#library(igraph);
#library(Biostrings);
# 27/06/18 new MutClust git directory
setwd('~/woofgit/mutclust');
source('r/struct_clust_analysis_utils.R');
source('r/struct_clust_util.R');
source('r/struct_clust_load_data.R');
source('/Users/ash/woofgit/tracerx/neofun/script/R/neofun_util.R');
# DIRECTORIES
# mutdat
dir_mutdat="/Users/ash/Dropbox/bioinf/neofun/run/mutclust/dt12a/mutdat"
#dir_mutdat="/home/ucbtshf/run/neofun/dt12a/mutclust/mutdat"
# run dir
dir_run="/Users/ash/Dropbox/bioinf/neofun/run/mutclust/dt12a/tst03"
# MGMT files
# ----------------
radius_used <- 5;
# Management file - MISSENSE
mgmt_file_missense <- file.path( dir_mutdat, "mfc_mgmt_swisscount_missense_5_100_20191014.tsv" );
# Management file - SILENT
mgmt_file_silent <- file.path( dir_mutdat, "mfc_mgmt_swisscount_silent_5_100_20191014.tsv" );
# How many randomisations used in this experiment?
#num_trials <- 10000L;
num_trials <- 100L;
groupID <- "tst03" ;
# Silent or synonymous?
isSilent = "N";
root_dir <- "~/Dropbox/bioinf/neofun/run/mutclust/dt12a";
group_dir <- file.path( root_dir, groupID );
z_sig_levels <- c( 2.575829 );  # 1%
# 02/07/2018 Create an analysis list for all mut_sum high outliers
#mutclust_mutsum_analysis <- list();
# Just use data.table created in iTask loop!
rm(dt_mutclust_mutsum_analysis);
rm(dt_mutclust_mutsum_analysis_task);
# MutClust runs copied from CS cluster...
#dat_dl_dir <- file.path(group_dir,"run");
dat_dl_dir <- file.path(group_dir);
# With groupID (older dt11 runs)
#dat_file_tail <- paste( "_", groupID, "_", radius_used, "_", radius_used, "_", as.character( num_trials ), "_scoresDTALL.RData", sep = "" );
# without groupID (just a constant string)
#group_string = "mc"
#dat_file_tail <- paste( "_", group_string, "_", radius_used, "_", radius_used, "_", as.character( num_trials ), "_scoresDTALL.RData", sep = "" );
dat_file_tail <- paste( "_", radius_used, "-", radius_used, "_", as.character( num_trials ), "_dtscoresALL.RData", sep = "" );
# *********************************
# Get the group run management file
# *********************************
if ( isSilent == "N" ) {
  mgmt_file <- mgmt_file_missense
  batchCode = "MS"
  }else{
    mgmt_file <- mgmt_file_silent
    batchCode = "SI"
  }
dt_mgmt <- data.table( read.table( mgmt_file, header = TRUE, sep = "\t", quote = "",
                                 dec = ".", stringsAsFactors = FALSE ) );
# *********************************
# Helper function for listing nearby 
# residues for a given residue index 
# from a list of cluster res.
# *********************************
res_in_range <- function(i){
  gsub(" ","",
    paste(highOutliers_rad[i,residue],":",
        toString(sc.calc_struct_cluster_residues(highOutliers_rad[i,residue],iRadius,pdb_xyz)),sep="")
  )
}
dt_mgmt
fin_tst03 <- c(1,2,3)
# Silent
#fin_mc04 <- c(1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,34,35,36,37,38,39,40,41,43,44,45,46,49,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,76,77,79,80,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100);
# Both
#fin_matched <- intersect( fin_mc03, fin_mc04 );
fin_matched <- fin_tst03;
# Get specific tasks
#taskID_list <- c( 1 );
#taskID_list <- c( 1, 3, 4, 5, 6, 7, 8 );
taskID_list <- fin_matched;
for ( iTask in taskID_list  ) {
  # Clear any existing data
  if (exists("scoresDTALL")) {rm(scoresDTALL)};
  # Get task info by filtering the mgmt table
  dt_task <- dt_mgmt[ TASKID == iTask ];
  # Single row?
  if (nrow( dt_task ) != 1){
    stop(writeLines(paste("#ERROR: Unable to select single TASKID from group management tsv file for task number ", iTask, sep = "" ) ) )
  }
  
  runID <- paste0( "R", gsub( " ", "0", sprintf( "%4s", iTask ) ), batchCode );
}
iTask
iTask=1
  runID <- paste0( "R", gsub( " ", "0", sprintf( "%4s", iTask ) ), batchCode );
runID
  # Load MFC results data
  #dt11a dat_file <- file.path(dat_dl_dir, "out", paste(runID,dat_file_tail,sep=""))
  #dat_file <- file.path(dat_dl_dir, paste( runID, dat_file_tail, sep = "" ) );
  dat_file <- file.path( dat_dl_dir, paste0( groupID, "_",  runID, dat_file_tail ) );
  writeLines( paste( "Using results file: ", dat_file, sep=""));
  
dat_file
    # Get means and std dev for MFC data
    #setkey(scoresDTALL,residue,radius);
    setkey( dt_scoresALL, residue, radius );
    #mean_randscoresDT <- sca.getMeanDT(scoresDTALL);
    mean_randscoresDT <- sca.getMeanDT( dt_scoresALL );
    # 02/07/18 add significance cut off to analysis info
ls()
dat_file
    load( dat_file );
ls()
dt_scoresALL
    setkey( dt_scoresALL, residue, radius );
    mean_randscoresDT <- sca.getMeanDT( dt_scoresALL );
z_sig_level <- z_sig_levels[1]
z_sig_level
      # Which residues have more mutated residues than expected: obs_muts > (mean + z_sig * SD)
      highOutliers <- sca.getHighOutliers( mean_randscoresDT, z_sig_level );
      # 26/06/18 For the mut sumn
      #highOutliers_mut_sum <- mean_randscoresDT[ mut_sum > ( mean_mut_sum + ( z_sig_level * sd_mut_sum ) ) ];
      highOutliers_mut_count_sum <- sca.getHighOutliers( mean_randscoresDT, z_sig_level, type="mut_count_sum" );
      highOutliers_weighted_mut_sum <- sca.getHighOutliers( mean_randscoresDT, z_sig_level, type="weighted_mut_sum" );
      highOutliers_ff_weighted_mut_sum <- sca.getHighOutliers( mean_randscoresDT, z_sig_level, type="ff_weighted_mut_sum" );
highOutliers
paste( highOutliers$residue, collapse = ", " )
    paste( highOutliers$residue, collapse = ", " );
    paste( highOutliers_mut_count_sum$residue, collapse = ", " ); 
    paste( highOutliers_weighted_mut_sum$residue, collapse = ", " ); 
    paste( highOutliers_ff_weighted_mut_sum$residue, collapse = ", " ); 
quit()
